name: CI Build + Unit Test

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches-ignore:
      - main

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - name: Check ldd version
        run: |
          function version_gt() { test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; }
          LDD_VERSION=$(ldd --version | awk '/ldd/{print $NF}')
          if version_gt $LDD_VERSION 2.31; then echo "ldd version is too high" && exit 1; fi

      - name: Check gofmt passes
        run: |
          if [ -n "$(gofmt -d -s .)" ]; then
            echo "Code is not properly formatted. Please run 'gofmt -w .'"
            exit 1
          fi

      - name: Verify dependencies
        run: |
          go env -w GO111MODULE=on
          go mod download
          LINT_VERSION=1.54.1
          curl -fsSL https://github.com/golangci/golangci-lint/releases/download/v${LINT_VERSION}/golangci-lint-${LINT_VERSION}-linux-amd64.tar.gz | \
            tar xz --strip-components 1 --wildcards \*/golangci-lint
          mkdir -p bin && mv golangci-lint bin/

      - name: Run checks
        run: |
          set -e
          STATUS=0
          assert-nothing-changed() {
            local diff
            "$@" >/dev/null || return 1
            if ! diff="$(git diff -U1 --color --exit-code)"; then
              printf '\e[31mError: running `\e[1m%s\e[22m` results in modifications that you must check into version control:\e[0m\n%s\n\n' "$*" "$diff" >&2
              git checkout -- .
              STATUS=1
            fi
          }

          assert-nothing-changed go fmt ./...
          assert-nothing-changed go mod tidy

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install go/vulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Go vulncheck
        run: govulncheck ./...

      - name: Test
        run: go test -v -race -p=1 ./...

      - name: Run vet tool
        run: go vet ./...

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: latest
          args: build --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: debug-artifacts
          path: dist
